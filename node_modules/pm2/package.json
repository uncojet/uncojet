{
  "name": "pm2",
  "preferGlobal": "true",
  "version": "0.10.8",
  "os": [
    "!win32"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "directories": {
    "bin": "./bin",
    "lib": "./lib",
    "example": "./examples"
  },
  "author": {
    "name": "Strzelewicz Alexandre",
    "email": "as@unitech.io",
    "url": "http://pm2.io"
  },
  "maintainers": [
    {
      "name": "tknew"
    },
    {
      "name": "soyuka",
      "email": "soyuka@gmail.com"
    },
    {
      "name": "Alex Kocharin",
      "email": "alex@kocharin.ru"
    },
    {
      "name": "achingbrain",
      "email": "alex@achingbrain.net"
    }
  ],
  "contributors": [
    {
      "name": "Alex Kocharin",
      "email": "alex@kocharin.ru"
    },
    {
      "name": "Soyuka",
      "email": "soyuka@gmail.com"
    },
    {
      "name": "Soyuka",
      "email": "soyuka@gmail.com"
    },
    {
      "name": "Xu Jingxin",
      "email": "sailxjx@gmail.com"
    },
    {
      "name": "Ben Postlethwaite",
      "email": "post.ben.here@gmail.com"
    },
    {
      "name": "Devo.ps",
      "email": "contact@devo.ps"
    },
    {
      "name": "Bret Copeland",
      "email": "bret@atlantisflight.org"
    },
    {
      "name": "John Hurliman",
      "email": "jhurliman@jhurliman.org"
    },
    {
      "name": "TruongSinh Tran-Nguyen",
      "email": "i@truongsinh.pro"
    },
    {
      "name": "Michael Hueuberger",
      "email": "michael.heuberger@binarykitchen.com"
    }
  ],
  "homepage": "https://github.com/Unitech/pm2",
  "description": "Modern CLI process manager for Node apps with a builtin load-balancer. Perfectly designed for microservices architecture.",
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV=test bash test/index.sh && NODE_ENV=test bash test/main.sh",
    "preinstall": "bash ./scripts/preinstall.sh",
    "postinstall": "bash ./scripts/postinstall.sh"
  },
  "keywords": [
    "cli",
    "fault tolerant",
    "sysadmin",
    "tools",
    "pm2",
    "logs",
    "log",
    "json",
    "express",
    "hapi",
    "kraken",
    "reload",
    "microservice",
    "programmatic",
    "harmony",
    "node-pm2",
    "production",
    "keymetrics",
    "deploy",
    "deployment",
    "daemon",
    "supervisor",
    "nodemon",
    "pm2.io",
    "ghost",
    "ghost production",
    "monitoring",
    "process manager",
    "forever",
    "forever-monitor",
    "keep process alive",
    "process configuration",
    "clustering",
    "cluster cli",
    "cluster",
    "cron",
    "devops",
    "dev ops"
  ],
  "bin": {
    "pm2": "./bin/pm2"
  },
  "dependencies": {
    "async": "~0.9.0",
    "axm": "~0.1.7",
    "chalk": "~0.5.1",
    "chokidar": "0.8.4",
    "cli-table": "~0.3.0",
    "coffee-script": "~1.8.0",
    "colors": "~0.6.2",
    "commander": "~2.3.0",
    "cron": "~1.0.4",
    "debug": "~2.0.0",
    "eventemitter2": "~0.4.14",
    "json-stringify-safe": "~5.0.0",
    "nssocket": "~0.5.1",
    "punt": "~2.2.0",
    "pidusage": "~0.1.0",
    "pm2-axon": "2.0.1",
    "pm2-axon-rpc": "0.3.1",
    "pm2-deploy": "~0.1.0",
    "pm2-interface": "~1.1.0",
    "pm2-multimeter": "~0.1.2",
    "pm2-rpc-fallback": "~2.8.0",
    "moment": "~2.8.2",
    "uid-number": "~0.0.5",
    "pm2-logs": "~0.1.1",
    "ikt": "git+http://ikt.pm2.io/ikt.git#master"
  },
  "devDependencies": {
    "mocha": "^1.20.1",
    "should": "^4.0.0",
    "better-assert": "^1.0.0",
    "promise-spawner": "^0.0.3"
  },
  "optionalDependencies": {
    "pm2-logs": "~0.1.1",
    "ikt": "git+http://ikt.pm2.io/ikt.git#master"
  },
  "bugs": {
    "url": "https://github.com/Unitech/pm2/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Unitech/pm2.git"
  },
  "license": "AGPLv3",
  "readme": "![PM2](https://github.com/unitech/pm2/raw/master/pres/pm2.20d3ef.png)\n\nPM2 is a process manager for Node.JS application with a built-in load balancer.\n\n### Main features\n\n- Advanced process management\n- Built-in load balancer (Node.JS - cluster mode)\n- 0s downtime reload (Node.JS - cluster mode)\n- JSON application declaration\n- Log management\n- Programmatic interface with embeddable capabilities\n- Provisioning and Deployment system\n- Application resource monitoring (RAM, CPU)\n- Application daemonization\n- Assisted startup script creation (SystemV/SystemD/Upstart)\n- Automatically restart process based on memory limit\n- Automatically stop unstable process (at launch)\n- Automatically restart process on file change\n\nFull test suit with more than 300 tests: (https://travis-ci.org/Unitech/PM2)\n\nCompatible with CoffeeScript.\nWorks on Linux & MacOS. Windows upcoming.\n\n[![NPM version](https://badge.fury.io/js/pm2.png)](http://badge.fury.io/js/pm2)\n[![Donate](http://gravaco.in/b06327acf5ae1a2ce3f08254ed7f33d7.png)](http://goo.gl/sdaIwX)\n[![Bountysource](https://www.bountysource.com/badge/team?team_id=931&style=raised)](https://www.bountysource.com/teams/keymetricsio?utm_source=Keymetrics.io&utm_medium=shield&utm_campaign=raised)\n\n[![NPM](https://nodei.co/npm/pm2.png?downloads=true&downloadRank=true)](https://nodei.co/npm/pm2/)\n\n### Build Status\n\nMaster: [![Build Status](https://api.travis-ci.org/Unitech/PM2.png?branch=master)](https://travis-ci.org/Unitech/PM2)\n\nDevelopment: [![Build Status](https://api.travis-ci.org/Unitech/PM2.png?branch=development)](https://travis-ci.org/Unitech/PM2)\n\n## Monitoring dashboard\n\n![Dashboard](http://leapfrogui.com/controlfrog/img/cf-layout-1.png)\n\nWe're going to release a very nice product, a dashboard to monitor every part of your Node.js applications. Here are some links:\n\n- [Pitch + Survey](https://docs.google.com/forms/d/1FuCjIhrGg-ItxInq2nLreoe9GS-gZWJNkNWE0JJajw8/viewform) People who fill the survey will be eligible for free license\n- [Newsletter](http://signup.pm2.io/) Subscribe to be kept informed\n\nThanks in advance and we hope that you like PM2!\n\n------\n\n## Table of contents\n\n### Quick start\n\n- [Installation](#a1)\n- [Usage](#a2)\n- [Examples](#a3)\n- [Different ways to launch a process](#a667)\n- [Options](#a987)\n- [How to update PM2?](#update-pm2)\n\n### Features\n\n- [Transitional state of apps](#a4)\n- [Process listing](#a6)\n- [Automatic restart process based on memory](#max-memory-restart)\n- [Monitoring CPU/Memory usage](#a7)\n- [Logs management](#a9)\n- [Clustering](#a5)\n- [Watch & Restart](#a890)\n- [Reloading without downtime](#a690)\n- [Make PM2 restart on server reboot](#a8)\n- [JSON app declaration](#a10)\n\n### Deployment - ecosystem.json\n\n- [Getting started with deployment](#deployment)\n- [Deployment options](#deployment-help)\n- [Considerations](#considerations)\n- [Contributing](#deployment-contribution)\n\n### Using PM2 programmatically (via API)\n\n- [Simple example](#programmatic-example)\n- [Programmatic API](#programmatic-api)\n\n### Specific\n\n- [Specific features](#a77)\n- [Configuration file](#a989)\n- [Enabling Harmony ES6](#a66)\n- [CoffeeScript](#a19)\n- [Testing PM2 on your prod environment](#a149)\n- [JSON app via pipe](#a96)\n\n### Knowledge\n\n- [Stateless apps ?](#stateless-apps)\n- [Transitional state of apps](#a4)\n- [Setup PM2 on server: tutorial](#a89)\n- [Logs and PID files](#a34)\n- [Execute any script: What is fork mode ?](#a23)\n\n### More\n\n- [Contributing/Development mode](#a27)\n- [Known bugs and workaround](#a21)\n- [They talk about it](#a20)\n- [License](#a15)\n\n------\n\n# Quick start\n\n<a name=\"a1\"/>\n## Installation\n\nThe latest PM2 stable version is installable via NPM:\n\n```bash\n$ npm install pm2@latest -g\n```\n\nIf the above fails use:\n\n```bash\n$ npm install git://github.com/Unitech/pm2#master -g\n```\n\nWe recommend Node.JS 0.11.13 for handling the cluster_mode (if you add the -i options to enable scaling and reload).\n\n<a name=\"a2\"/>\n## Usage\n\nHello world:\n\n```bash\n$ pm2 start app.js\n```\n\n<a name=\"a3\"/>\n## Raw Examples\n\n```bash\n# Fork mode\n$ pm2 start app.js --name my-api # Name process\n\n# Cluster mode\n$ pm2 start app.js -i max        # Will start maximum processes with LB depending on available CPUs\n\n# Listing\n\n$ pm2 list               # Display all processes status\n$ pm2 jlist              # Print process list in raw JSON\n$ pm2 prettylist         # Print process list in beautified JSON\n\n$ pm2 describe 0         # Display all informations about a specific process\n\n$ pm2 monit              # Monitor all processes\n\n# Logs\n\n$ pm2 logs               # Display all processes logs in streaming\n$ pm2 ilogs              # Advanced termcaps interface to display logs\n$ pm2 flush              # Empty all log file\n$ pm2 reloadLogs         # Reload all logs\n\n# Actions\n\n$ pm2 stop all           # Stop all processes\n$ pm2 restart all        # Restart all processes\n\n$ pm2 reload all         # Will 0s downtime reload (for NETWORKED apps)\n$ pm2 gracefulReload all # Send exit message then reload (for networked apps)\n\n$ pm2 stop 0             # Stop specific process id\n$ pm2 restart 0          # Restart specific process id\n\n$ pm2 delete 0           # Will remove process from pm2 list\n$ pm2 delete all         # Will remove all processes from pm2 list\n\n# Misc\n\n$ pm2 reset <process>    # Reset meta data (restarted time...)\n$ pm2 updatePM2          # Update in memory pm2\n$ pm2 ping               # Ensure pm2 daemon has been launched\n$ pm2 sendSignal SIGUSR2 my-app # Send system signal to script\n$ pm2 start app.js --no-daemon\n```\n\n## Different ways to launch a process\n\n```bash\n$ pm2 start app.js           # Start app.js\n\n$ pm2 start app.js -- -a 23  # Pass arguments '-a 23' argument to app.js script\n\n$ pm2 start app.js --name serverone # Start a process an name it as server one\n                                    # you can now stop the process by doing\n                                    # pm2 stop serverone\n\n$ pm2 start app.js --node-args=\"--debug=7001\" # --node-args to pass options to node V8\n\n$ pm2 start app.js -i max    # Start maximum processes depending on available CPUs (cluster mode)\n\n$ pm2 start app.js --log-date-format \"YYYY-MM-DD HH:mm Z\"    # Log will be prefixed with custom time format\n\n$ pm2 start app.json                # Start processes with options declared in app.json\n                                    # Go to chapter Multi process JSON declaration for more\n\n$ pm2 start app.js -e err.log -o out.log  # Start and specify error and out log\n\n$ pm2 --run-as-user foo start app.js  # Start app.js as user foo instead of the user that started pm2\n\n$ pm2 --run-as-user foo --run-as-group bar start app.js  # Start app.js as foo:bar instead of the user:group that started pm2\n```\n\nFor scripts in other languages:\n\n```bash\n$ pm2 start echo.pl --interpreter=perl\n\n$ pm2 start echo.coffee\n$ pm2 start echo.php\n$ pm2 start echo.py\n$ pm2 start echo.sh\n$ pm2 start echo.rb\n```\n\nThe interpreter is set by default with this equivalence:\n\n```json\n{\n  \".sh\": \"bash\",\n  \".py\": \"python\",\n  \".rb\": \"ruby\",\n  \".coffee\" : \"coffee\",\n  \".php\": \"php\",\n  \".pl\" : \"perl\",\n  \".js\" : \"node\"\n}\n```\n\n<a name=\"a987\"/>\n## Options\n\n```\nOptions:\n\n    -h, --help                   output usage information\n    -V, --version                output the version number\n    -v --verbose                 verbose level\n    -s --silent                  hide all messages\n    -m --mini-list               display a compacted list without formatting\n    -f --force                   force actions\n    -n --name <name>             set a <name> for script\n    -i --instances <number>      launch [number|'max'] (load balanced) instances (for networked app)\n    -o --output <path>           specify out log file\n    -e --error <path>            specify error log file\n    -p --pid <pid>               specify pid file\n    -x --execute-command         execute a program using fork system\n    -u --user <username>         define user when generating startup script\n    -c --cron <cron_pattern>     restart a running process based on a cron pattern\n    -w --write                   write configuration in local folder\n    --interpreter <interpreter>  the interpreter pm2 should use for executing app (bash, python...)\n    --no-daemon                  run pm2 daemon in the foreground if it doesn't exist already\n    --merge-logs                 merge logs\n    --watch                      watch folder(s) for changes. When `true`, watching all folders from root. Can also be a string or an array of strings for paths to watch for changes.\n    --node-args <node_args>      space-delimited arguments to pass to node in cluster mode - e.g. --node-args=\"--debug=7001 --trace-deprecation\"\n    --run-as-user <run_as_user>    The user or uid to run a managed process as\n    --run-as-group <run_as_group>  The group or gid to run a managed process as\n```\n\n<a name=\"update-pm2\"/>\n## How to update PM2\n\nInstall the latest pm2 version :\n\n```bash\n$ npm install pm2@latest -g\n```\n\nThen update the in-memory PM2 :\n\n```bash\n$ pm2 updatePM2\n```\n\n# Features\n\n<a name=\"a4\"/>\n## Transitional state of apps (important)\n\nPM2 is a process manager. PM2 can start, stop, restart and *delete* processes.\n\nStart a process:\n\n```bash\n$ pm2 start app.js --name \"my-api\"\n$ pm2 start web.js --name \"web-interface\"\n```\n\nNow let's say I need to stop the web-interface:\n\n```bash\n$ pm2 stop web-interface\n```\n\nAs you can see **the process hasn't disappeared**. It's still there but in `stopped` status.\n\n\nTo restart it just do:\n\n```bash\n$ pm2 restart web-interface\n```\n\nNow I want to **delete** the app from the PM2 process list.\nTo do so:\n\n```bash\n$ pm2 delete web-interface\n```\n\n<a name=\"a6\"/>\n## Process listing\n\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-list.png)\n\nTo list all running processes:\n\n```bash\n$ pm2 list\n# Or\n$ pm2 [list|ls|l|status]\n```\n\nTo get more details about a specific process:\n\n```bash\n$ pm2 describe 0\n```\n\n<a name=\"max-memory-restart\"/>\n## Automatic restart process based on memory\n\nValue passed is in megaoctets. Internally it uses the V8 flag `--max-old-space-size=MEM` to make a process exit when memory exceed a certain amount of RAM used.\n\nCLI:\n```bash\n$ pm2 start big-array.js --max-memory-restart 20\n```\n\nJSON:\n```json\n{\n  \"name\" : \"max_mem\",\n  \"script\" : \"big-array.js\",\n  \"max_memory_restart\" : \"20\"\n}\n```\n\n<a name=\"a7\"/>\n## Monitoring CPU/Memory usage\n\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-monit.png)\n\nMonitor all processes launched:\n\n```bash\n$ pm2 monit\n```\n\n<a name=\"a9\"/>\n## Logs management\n\n### Displaying logs in realtime\n\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-logs.png)\n\nDisplaying logs of specified process or all processes in realtime:\n\n```bash\n$ pm2 logs\n$ pm2 logs big-api\n$ pm2 flush # Clear all the logs\n```\n\n### Advanced log interface\n\nNavigate between processes logs in realtime with an ergonomic interface:\n\n```bash\n$ pm2 ilogs\n```\n\n### Reloading all logs (SIGUSR2/Logrotate)\n\nTo reload all logs, you can send `SIGUSR2` to the PM2 process.\n\nYou can also reload all logs via the command line with:\n\n```bash\n$ pm2 reloadLogs\n```\n\n### Options\n\n```bash\n--merge-logs : merge logs from different instances but keep error and out separated\n--log-date-format <format>: prefix logs with formated timestamp (http://momentjs.com/docs/#/parsing/string-format/)\n```\n\n<a name=\"a5\"/>\n## Clustering (cluster_mode)\n\nThe *cluster_mode* will automatically wrap your Node.js app into the cluster module and will enable you to reload your app without downtime and to scale your processes across all CPUs available.\n\nTo enable the *cluster_mode*, just pass the -i <instances> option:\n\n```bash\n$ pm2 start app.js -i 1\n```\n\nTo launch `max` instances (`max` depending on the number of CPUs available) and set the load balancer to balance queries among process:\n\n```bash\n$ pm2 start app.js --name \"API\" -i max\n```\n\nIf your app is well-designed (**stateless**) you'll be able to **process many more queries**.\n\nImportant concepts to make a Node.js app stateless:\n\n- Sessions must not be stored in memory but shared via a database (Redis, Mongo, whatever)\n- [WebSocket/Socket.io should communicate via a database](http://socket.io/docs/using-multiple-nodes/#passing-events-between-nodes)\n\n<a name=\"a690\"/>\n## Reloading without downtime\n\nAs opposed to `restart`, which kills and restarts the process, `reload` achieves a 0-second-downtime reload.\n\n**Warning** This feature only works for apps in *cluster_mode*, that uses HTTP/HTTPS/Socket connections.\n\nTo reload an app:\n\n```bash\n$ pm2 reload api\n```\n\nIf the reload system hasn't managed to reload your app, a timeout will simply kill the process and will restart it.\n\n### Graceful reload\n\nSometimes you can experience a **very long reload, or a reload that doesn't work** (fallback to restart).\n\nIt means that your app **still has open connections on exit**.\n\nTo work around this problem you have to use the graceful reload.\nGraceful reload is a mechanism that will send a **shutdown** message to your process before reloading it.\nYou can control the time that the app has to shutdown via the `PM2_GRACEFUL_TIMEOUT` environment variable.\n\nExample:\n\n```javascript\nprocess.on('message', function(msg) {\n  if (msg == 'shutdown') {\n    // Your process is going to be reloaded\n    // You have to close all database/socket.io/* connections\n\n    console.log('Closing all connections...');\n\n    // You will have 4000ms to close all connections before\n    // the reload mechanism will try to do its job\n\n    setTimeout(function() {\n      console.log('Finished closing connections');\n      // This timeout means that all connections have been closed\n      // Now we can exit to let the reload mechanism do its job\n      process.exit(0);\n    }, 1500);\n  }\n});\n```\n\nThen use the command:\n\n```bash\n$ pm2 gracefulReload [all|name]\n```\n\nWhen PM2 starts a new process to replace an old one, it will wait for the new process to begin listening to a connection before sending the shutdown message to the old one.  If a script does not need to listen to a connection, it can manually tell PM2 that the process has started up by calling `process.send('online')`.\n\n<a name=\"a8\"/>\n## Startup script\n\nPM2 has the amazing ability to **generate startup scripts and configure them**.\nPM2 is also smart enough to **save all your process list** and to **bring back all your processes on restart**.\n\n```bash\n$ pm2 startup [ubuntu|centos|gentoo|systemd]\n```\n\nOnce you have started the apps and want to keep them on server reboot do:\n\n```bash\n$ pm2 save\n```\n\n**Warning** It's tricky to make this feature work generically, so once PM2 has setup your startup script, reboot your server to make sure that PM2 has launched your apps!\n\n### More information\n\nThree types of startup scripts are available:\n\n- SystemV init script (with the option `ubuntu` or `centos`)\n- OpenRC init script (with the option `gentoo`)\n- SystemD init script (with the `systemd` option)\n\nThe startup options are using:\n\n- **ubuntu** will use `updaterc.d` and the script `lib/scripts/pm2-init.sh`\n- **centos** will use `chkconfig` and the script `lib/scripts/pm2-init-centos.sh`\n- **gentoo** will use `rc-update` and the script `lib/scripts/pm2`\n- **systemd** will use `systemctl` and the script `lib/scripts/pm2.service`\n\n### User permissions\n\nLet's say you want the startup script to be executed under another user.\n\nJust use the `-u <username>` option !\n\n```bash\n$ pm2 startup ubuntu -u www\n```\n\n### Related commands\n\nDump all processes status and environment managed by PM2:\n```bash\n$ pm2 dump\n```\nIt populates the file `~/.pm2/dump.pm2` by default.\n\nTo bring back the latest dump:\n```bash\n$ pm2 [resurrect|save]\n```\n\n<a name=\"a890\"/>\n## Watch & Restart\n\nPM2 can automatically restart your app when a file changes in the current directory or its subdirectories:\n\n```bash\n$ pm2 start app.js --watch\n```\n\nIf `--watch` is enabled, stopping it won't stop watching:\n- `pm2 stop 0` 'll not stop watching\n- `pm2 stop --watch 0` 'll stop watching\n\nRestart toggle the `watch` parameter when triggered.\n\nTo watch specifics paths, please use a JSON app declaration, `watch` can take a string or an array of paths. Default is `true`:\n\n```json\n{\n  \"watch\": [\"server\", \"client\"],\n  \"ignoreWatch\" : [\"node_modules\", \"client/img\"]\n}\n```\n\n<a name=\"a10\"/>\n## JSON app declaration\n\nYou can define parameters for your apps in `processes.json`:\n\n```json\n{\n  \"apps\" : [{\n    \"name\"        : \"echo\",\n    \"script\"      : \"examples/args.js\",\n    \"args\"        : \"['--toto=heya coco', '-d', '1']\",\n    \"log_date_format\"  : \"YYYY-MM-DD HH:mm Z\",\n    \"ignoreWatch\" : [\"[\\\\/\\\\\\\\]\\\\./\", \"node_modules\"],\n    \"watch\"       : \"true\",\n    \"node_args\"   : \"--harmony\",\n    \"cwd\"         : \"/this/is/a/path/to/start/script\",\n    \"env\": {\n        \"NODE_ENV\": \"production\",\n        \"AWESOME_SERVICE_API_TOKEN\": \"xxx\"\n    }\n  },{\n    \"name\"       : \"api\",\n    \"script\"     : \"./examples/child.js\",\n    \"instances\"  : \"4\",\n    \"log_date_format\"  : \"YYYY-MM-DD\",\n    \"error_file\" : \"./examples/child-err.log\",\n    \"out_file\"   : \"./examples/child-out.log\",\n    \"pid_file\"   : \"./examples/child.pid\",\n    \"exec_mode\"  : \"cluster_mode\",\n    \"port\"       : 9005\n  },{\n    \"name\"       : \"auto-kill\",\n    \"script\"     : \"./examples/killfast.js\",\n    \"min_uptime\" : \"100\",\n    \"exec_mode\"  : \"fork_mode\"\n  }]\n}\n```\n\nThen run:\n```bash\n$ pm2 start processes.json\n$ pm2 stop processes.json\n$ pm2 delete processes.json\n$ pm2 restart processes.json\n```\n\n**A few notes about JSON app declarations:**\n\n- All command line options passed when using the JSON app declaration will be dropped i.e.\n\n```bash\n$ cat node-app-1.json\n\n{\n  \"name\" : \"node-app-1\",\n  \"script\" : \"app.js\",\n  \"cwd\" : \"/srv/node-app-1/current\"\n}\n\n$ pm2 --run-as-user app start node-app-1.json\n\n$ ps aux | grep node-app\nroot 14735 5.8 1.1 752476 83932 ? Sl 00:08 0:00 pm2: node-app-1  <-- owned by the default user (root), not app\n```\n- JSON app declarations are additive.  Continuing from above:\n```bash\n$ pm2 start node-app-2.json\n$ ps aux | grep node-app\nroot  14735  5.8  1.1  752476  83932 ? Sl 00:08 0:00 pm2: node-app-1\nroot  24271  0.0  0.3  696428  24208 ? Sl 17:36 0:00 pm2: node-app-2\n```\nNote that if you execute `pm2 start node-app-2` again, it will spawn an additional instance node-app-2.\n\n- **cwd:** your JSON declaration does not need to reside with your script.  If you wish to maintain the JSON(s) in a location other than your script (say, `/etc/pm2/conf.d/node-app.json`) you will need to use the cwd feature.  (Note, this is especially helpful for capistrano style directory structures that use symlinks.)  Files can be either relative to the cwd directory, or absolute (example below.)\n\n- The following are valid options for JSON app declarations:\n```\n[{\n  \"name\"             : \"node-app\",\n  \"cwd\"              : \"/srv/node-app/current\",\n  \"args\"             : \"['--toto=heya coco', '-d', '1']\",\n  \"script\"           : \"bin/app.js\",\n  \"node_args\"        : \"--harmony\",\n  \"log_date_format\"  : \"YYYY-MM-DD HH:mm Z\",\n  \"error_file\"       : \"/var/log/node-app/node-app.stderr.log\",\n  \"out_file\"         : \"log/node-app.stdout.log\",\n  \"pid_file\"         : \"pids/node-geo-api.pid\",\n  \"run_as_user\"      : \"app\",\n  \"run_as_group\"     : \"www-data\",\n  \"instances\"        : \"6\", //or 'max'\n  \"min_uptime\"       : \"200\", // milliseconds, defaults to 1000\n  \"max_restarts\"     : \"10\", // defaults to 15\n  \"cron_restart\"     : \"1 0 * * *\",\n  \"watch\"            : \"false\",\n  \"ignoreWatch\"      : [\"[\\\\/\\\\\\\\]\\\\./\", \"node_modules\"],\n  \"merge_logs\"       : \"true\",\n  \"exec_interpreter\" : \"node\",\n  \"exec_mode\"        : \"fork_mode\",\n  \"env\": {\n    \"NODE_ENV\": \"production\",\n    \"AWESOME_SERVICE_API_TOKEN\": \"xxx\"\n  }\n}]\n```\n\n<a name=\"deployment\"/>\n# Deployment (PM2 >= 0.9.0)\n\nPM2 embed a simple and powerful deployment system with revision tracing.\nIt's based on <a href=\"https://github.com/visionmedia/deploy\">https://github.com/visionmedia/deploy</a>\n\nA step-by-step tutorial is available here : [Deploy and Iterate faster with PM2 deploy](https://keymetrics.io/2014/06/25/ecosystem-json-deploy-and-iterate-faster/)\n\n## Getting started with deployment\n\nPlease read the [Considerations to use PM2 deploy](#considerations)\n\n1- Generate a sample ecosystem.json file that list processes and deployment environment\n\n```bash\n$ pm2 ecosystem\n```\n\nIn the current folder a `ecosystem.json` file will be created.\nIt contains this:\n\n```json\n{\n  \"apps\" : [{\n    \"name\"      : \"API\",\n    \"script\"    : \"app.js\",\n    \"env\": {\n      \"COMMON_VARIABLE\": \"true\"\n    },\n    \"env_production\" : {\n      \"NODE_ENV\": \"production\"\n    }\n  },{\n    \"name\"      : \"WEB\",\n    \"script\"    : \"web.js\"\n  }],\n  \"deploy\" : {\n    \"production\" : {\n      \"user\" : \"node\",\n      \"host\" : \"212.83.163.1\",\n      \"ref\"  : \"origin/master\",\n      \"repo\" : \"git@github.com:repo.git\",\n      \"path\" : \"/var/www/production\",\n      \"post-deploy\" : \"pm2 startOrRestart ecosystem.json --env production\"\n    },\n    \"dev\" : {\n      \"user\" : \"node\",\n      \"host\" : \"212.83.163.1\",\n      \"ref\"  : \"origin/master\",\n      \"repo\" : \"git@github.com:repo.git\",\n      \"path\" : \"/var/www/development\",\n      \"post-deploy\" : \"pm2 startOrRestart ecosystem.json --env dev\"\n    }\n  }\n}\n```\n\nEdit the file according to your needs.\n\n2- Be sure that you have the public ssh key on your local machine\n\n```bash\n$ ssh-keygen -t rsa\n$ ssh-copy-id root@myserver.com\n```\n\n3- Now initialize the remote folder with:\n\n```bash\n$ pm2 deploy <configuration_file> <environment> setup\n```\n\nE.g:\n\n```bash\n$ pm2 deploy ecosystem.json production setup\n```\n\nThis command will create all the folders on your remote server.\n\n4- Deploy your code\n\n```bash\n$ pm2 deploy ecosystem.json production\n```\n\nNow your code will be populated, installed and started with PM2\n\n<a name=\"deployment-help\"/>\n## Deployment options\n\nDisplay deploy help via `pm2 deploy help`:\n\n```\n$ pm2 deploy <configuration_file> <environment> <command>\n\n  Commands:\n    setup                run remote setup commands\n    update               update deploy to the latest release\n    revert [n]           revert to [n]th last deployment or 1\n    curr[ent]            output current release commit\n    prev[ious]           output previous release commit\n    exec|run <cmd>       execute the given <cmd>\n    list                 list previous deploy commits\n    [ref]                deploy to [ref], the \"ref\" setting, or latest tag\n```\n\n## Commands\n\n```\n$ pm2 startOrRestart all.json            # Invoke restart on all apps in JSON\n$ pm2 startOrReload all.json             # Invoke reload\n$ pm2 startOrGracefulReload all.json     # Invoke gracefulReload\n```\n\n<a name=\"considerations\"/>\n## Considerations\n\n- You might want to commit your node_modules folder ([#622](https://github.com/Unitech/pm2/issues/622)) or add the `npm install` command to the `post-deploy` section: `\"post-deploy\" : \"npm install && pm2 startOrRestart ecosystem.json --env production\"`\n- Verify that your remote server has the permission to git clone the repository\n- You can declare specific environment variable depending on the environment you want to deploy the code to. For instance to declare variables for the production environment, just add \"env_production\": {} and declare that variables.\n- PM2 will look by default to `ecosystem.json`. So you can skip the <configuration_file> options if it's the case\n- You can embed the \"apps\" & \"deploy\" section in the package.json\n- It deploys your code via ssh, you don't need any dependencies\n- Process are initialized / started automatically depending on application name in `ecosystem.json`\n- PM2-deploy repository is there: [pm2-deploy](https://github.com/Unitech/pm2-deploy)\n\n<a name=\"deployment-contribution\"/>\n## Contributing\n\nThe module is <a href=\"https://github.com/Unitech/pm2-deploy\">https://github.com/Unitech/pm2-deploy</a>\nFeel free to PR for any changes or fix.\n\n<a name=\"programmatic-example\"/>\n# Using PM2 programmatically\n\nPM2 can be used programmatically, meaning that you can embed a process manager directly in your code, spawn processes, keep them alive even if the main script is exited.\n\nCheck out [this article](http://keymetrics.io/2014/07/02/manage-processes-programmatically-with-pm2/) for more informations.\n\n## Simple example\n\nThis will require pm2, launch `test.js`, list processes then exit the script.\nYou will notice that after exiting this script you will be able to see `test.js` process with `pm2 list`\n\n```bash\n$ npm install pm2 --save\n```\n\n```javascript\nvar pm2 = require('pm2');\n\n// Connect or launch PM2\npm2.connect(function(err) {\n\n  // Start a script on the current folder\n  pm2.start('test.js', { name: 'test' }, function(err, proc) {\n    if (err) throw new Error('err');\n\n    // Get all processes running\n    pm2.list(function(err, process_list) {\n      console.log(process_list);\n\n      // Disconnect to PM2\n      pm2.disconnect(function() { process.exit(0) });\n    });\n  });\n})\n```\n\n<a name=\"programmatic-api\"/>\n## Programmatic API\n\n<table class=\"table table-striped table-bordered\">\n    <tr>\n        <th>Method name</th>\n        <th>API</th>\n    </tr>\n     <tr>\n      <td><b>Connect/Launch</b></td>\n      <td>pm2.connect(fn(err){})</td>\n    </tr>\n     <tr>\n      <td><b>Disconnect</b></td>\n      <td>pm2.disconnect(fn(err, proc){})</td>\n    </tr>\n</table>\n\n**Consideration with .connect**: the .connect method connect to the local PM2, but if PM2 is not up, it will launch it and will put in in background as you launched it via CLI.\n\n<table class=\"table table-striped table-bordered\">\n    <tr>\n        <th>Method name</th>\n        <th>API</th>\n    </tr>\n    <tr>\n      <td><b>Start</b></td>\n      <td>pm2.start(script_path|json_path, options, fn(err, proc){})</td>\n    </tr>\n    <tr>\n      <td>Options </td>\n      <td>\n      nodeArgs(arr), scriptArgs(arr), name(str), instances(int), error(str), output(str), pid(int), cron(str), mergeLogs(bool), watch(bool), runAsUser(int), runAsGroup(int), executeCommand(bool), interpreter(str), write(bool)</td>\n    </tr>\n    <tr>\n      <td><b>Restart</b></td>\n      <td>pm2.restart(proc_name|proc_id|all, fn(err, proc){})</td>\n       </tr>\n     <tr>\n      <td><b>Stop</b></td>\n      <td>pm2.stop(proc_name|proc_id|all, fn(err, proc){})</td>\n    </tr>\n    <tr>\n      <td><b>Delete</b></td>\n      <td>pm2.delete(proc_name|proc_id|all, fn(err, proc){})</td>\n    </tr>\n\n\n    <tr>\n      <td><b>Reload</b></td>\n      <td>pm2.reload(proc_name|all, fn(err, proc){})</td>\n    </tr>\n      <tr>\n      <td><b>Graceful Reload</b></td>\n      <td>pm2.gracefulReload(proc_name|all, fn(err, proc){})</td>\n    </tr>\n</table>\n\n<table class=\"table table-striped table-bordered\">\n    <tr>\n        <th>Method name</th>\n        <th>API</th>\n    </tr>\n    <tr>\n      <td><b>List</b></td>\n      <td>pm2.list(fn(err, list){})</td>\n    </tr>\n    <tr>\n      <td><b>Describe process</b></td>\n      <td>pm2.describe(proc_name|proc_id, fn(err, list){})</td>\n    </tr>\n    <tr>\n      <td><b>Dump (save)</b></td>\n      <td>pm2.dump(fn(err, ret){})</td>\n    </tr>\n    <tr>\n      <td><b>Flush logs</b></td>\n      <td>pm2.flush(fn(err, ret){})</td>\n    </tr>\n     <tr>\n      <td><b>Reload logs</b></td>\n      <td>pm2.reloadLogs(fn(err, ret){})</td>\n    </tr>\n         <tr>\n      <td><b>Send signal</b></td>\n      <td>pm2.sendSignalToProcessName(signal,proc,fn(err, ret){})</td>\n    </tr>\n     <tr>\n      <td><b>Generate start script</b></td>\n      <td>pm2.startup(platform, fn(err, ret){})</td>\n    </tr>\n     <tr>\n      <td><b>Kill PM2</b></td>\n      <td>pm2.killDaemon(fn(err, ret){})</td>\n    </tr>\n</table>\n\n<a name=\"a77\"/>\n# Special features\n\nLaunching PM2 without daemonizing itself:\n\n```bash\n$ pm2 start app.js --no-daemon\n```\n\nSending a system signal to a process:\n\n```bash\n$ pm2 sendSignal SIGUSR2 my-app\n```\n\n<a name=\"a989\"/>\n## Configuration file\n\nYou can specify the following options by editing the file `~/.pm2/custom_options.sh`:\n\n```\nPM2_RPC_PORT\nPM2_PUB_PORT\nPM2_BIND_ADDR\nPM2_API_PORT\nPM2_GRACEFUL_TIMEOUT\nPM2_MODIFY_REQUIRE\n```\n\n## API health endpoint\n\n```bash\n$ pm2 web\n```\n\n<a name=\"a66\"/>\n## Enabling Harmony ES6\n\nThe `--node-args` option permit to launch script with V8 flags, so to enable harmony for a process just do this:\n```bash\n$ pm2 start my_app.js --node-args=\"--harmony\"\n```\n\nAnd with JSON declaration:\n\n```bash\n[{\n  \"name\" : \"ES6\",\n  \"script\" : \"es6.js\",\n  \"node_args\" : \"--harmony\"\n}]\n```\n\n<a name=\"a19\"/>\n## CoffeeScript\n\n```bash\n$ pm2 start my_app.coffee\n```\n\nThat's all!\n\n# Knowledge\n\n\n<a name=\"stateless-apps\"/>\n## Stateless apps\n\nWe recommend (and you must) write stateless NodeJS apps. Apps that don't retain any form of local variables or local instances or whatever local.\nEvery data, states, websocket session, session data, must be shared via any kind of database.\n\nWe recommend using Redis for sharing session data, websocket.\n\n- SocketIO with Redis : [https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO](Configuring SocketIO)\n- Redis session store for Connect : [https://github.com/visionmedia/connect-redis](Connect-redis)\n\nWe recommend following the 12 factor convention : [http://12factor.net/](http://12factor.net/)\n\n<a name=\"a89\"/>\n## Setup pm2 on a server\n\n[How To Use pm2 to Setup a Node.js Production Environment On An Ubuntu VPS](https://www.digitalocean.com/community/articles/how-to-use-pm2-to-setup-a-node-js-production-environment-on-an-ubuntu-vps)\n\n<a name=\"a34\"/>\n## Log and PID files\n\nBy default, logs (error and output), pid files, dumps, and PM2 logs are located in `~/.pm2/`:\n\n```\n.pm2/\n├── dump.pm2\n├── custom_options.sh\n├── pm2.log\n├── pm2.pid\n├── logs\n└── pids\n```\n\n<a name=\"a23\"/>\n## Execute any kind of script\n\nIn fork mode almost all options are the same as the cluster mode. But there is no [`reload`](#reloading-without-downtime) or `gracefulReload` command.\n\nYou can also exec scripts written in other languages:\n\n```bash\n$ pm2 start my-bash-script.sh -x --interpreter bash\n\n$ pm2 start my-python-script.py -x --interpreter python\n```\n\nThe interpreter is deduced from the file extension from the [following list](https://github.com/Unitech/pm2/blob/master/lib/interpreter.json).\n\n<a name=\"a96\"/>\n## JSON app configuration via pipe from stdout\n\nPull-requests:\n- [#273](https://github.com/Unitech/pm2/pull/273)\n- [#279](https://github.com/Unitech/pm2/pull/279)\n\n```bash\n#!/bin/bash\n\nread -d '' my_json <<_EOF_\n[{\n    \"name\"       : \"app1\",\n    \"script\"     : \"/home/projects/pm2_nodetest/app.js\",\n    \"instances\"  : \"4\",\n    \"error_file\" : \"./logz/child-err.log\",\n    \"out_file\"   : \"./logz/child-out.log\",\n    \"pid_file\"   : \"./logz/child.pid\",\n    \"exec_mode\"  : \"cluster_mode\",\n    \"port\"       : 4200\n}]\n_EOF_\n\necho $my_json | pm2 start -\n```\n\n<a name=\"a149\"/>\n## Is my production server ready for PM2?\n\nJust try the tests before using PM2 on your production server\n\n```bash\n$ git clone https://github.com/Unitech/pm2.git\n$ cd pm2\n$ npm install  # Or do NODE_ENV=development npm install if some packages are missing\n$ npm test\n```\n\nIf a test is broken please report us issues [here](https://github.com/Unitech/pm2/issues?state=open)\nAlso make sure you have all dependencies needed. For Ubuntu:\n\n```bash\n$ sudo apt-get install build-essential\n# nvm is a Node.js version manager - https://github.com/creationix/nvm\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n$ nvm install v0.11.10\n$ nvm use v0.11.10\n$ nvm alias default v0.11.10\n```\n\n<a name=\"a27\"/>\n## Contributing/Development mode\n\nTo hack PM2, it's very simple:\n\n```bash\n$ pm2 kill   # kill the current pm2\n$ git clone my_pm2_fork.git\n$ cd pm2/\n$ DEBUG=* PM2_DEBUG=true ./bin/pm2 --no-daemon\n```\n\nEach time you edit the code, be sure to kill and restart PM2 to make changes taking effect.\n\n## Install PM2 development\n\n```bash\n$ npm install git://github.com/Unitech/pm2#development -g\n```\n\n<a name=\"a21\"/>\n## Known bugs and workarounds\n\nFirst, install the lastest PM2 version:\n\n```bash\n$ npm install -g pm2@latest\n```\n\n### Node 0.10.x doesn't free the script port when stopped in cluster_mode\n\nDon't use the *cluster_mode* via -i option.\n\n### User tips from issues\n- [Vagrant and pm2 #289](https://github.com/Unitech/pm2/issues/289#issuecomment-42900019)\n- [Start the same app on different ports #322](https://github.com/Unitech/pm2/issues/322#issuecomment-46792733)\n- [Using ansible with pm2](https://github.com/Unitech/pm2/issues/88#issuecomment-49106686)\n- [Cron string as argument](https://github.com/Unitech/pm2/issues/496#issuecomment-49323861)\n- [Restart when process reaches a specific memory amount](https://github.com/Unitech/pm2/issues/141)\n- [Sticky sessions and socket.io discussion](https://github.com/Unitech/PM2/issues/637)\n\n<a name=\"a20\"/>\n## External resources and articles\n\n- [Goodbye node-forever, hello pm2](http://devo.ps/blog/2013/06/26/goodbye-node-forever-hello-pm2.html)\n- http://www.allaboutghost.com/keep-ghost-running-with-pm2/\n- http://blog.ponyfoo.com/2013/09/19/deploying-node-apps-to-aws-using-grunt\n- http://www.allaboutghost.com/keep-ghost-running-with-pm2/\n- http://bioselemental.com/keeping-ghost-alive-with-pm2/\n- http://blog.chyld.net/installing-ghost-on-ubuntu-13-10-aws-ec2-instance-with-pm2/\n- http://blog.marvinroger.fr/gerer-ses-applications-node-en-production-pm2/\n- https://www.codersgrid.com/2013/06/29/pm2-process-manager-for-node-js/\n- http://www.z-car.com/blog/programming/how-to-rotate-logs-using-pm2-process-manager-for-node-js\n- http://yosoftware.com/blog/7-tips-for-a-node-js/\n- https://www.exponential.io/blog/nodeday-2014-moving-a-large-developer-workforce-to-nodejs\n- http://blog.rapsli.ch/posts/2013/2013-10-17-node-monitor-pm2.html\n- https://coderwall.com/p/igdqyw\n- http://revdancatt.com/2013/09/17/node-day-1-getting-the-server-installing-node-and-pm2/\n- https://medium.com/tech-talk/e7c0b0e5ce3c\n\n## Contributors\n\n[Contributors](https://github.com/Unitech/PM2/graphs/contributors)\n\n## Sponsors\n\nThanks to [Devo.ps](http://devo.ps/) and [Wiredcraft](http://wiredcraft.com/) for their knowledge and expertise.\n\n<a name=\"a15\"/>\n# License\n\nFiles in `lib/` are made available under the terms of the GNU Affero General Public License 3.0 (AGPL 3.0).\nExcept the file `lib/CLI.js` who is made under the terms of the Apache V2 license.\n",
  "readmeFilename": "README.md",
  "_id": "pm2@0.10.8",
  "dist": {
    "shasum": "2b743f89b73cd225b16b67ffd3d2117aa194b658"
  },
  "_from": "pm2@",
  "_resolved": "https://registry.npmjs.org/pm2/-/pm2-0.10.8.tgz"
}
